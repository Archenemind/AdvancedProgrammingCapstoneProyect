// <auto-generated />
using System;
using CarRental.DataAccess.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240503193427_Kdot")]
    partial class Kdot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.27");

            modelBuilder.Entity("CarRental.Domain.Entities.Circulations.Circulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Color2")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpeditionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InsuranceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SomatonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Circulations", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Common.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Prices", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Insurances.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpeditionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Insurances", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Persons.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");
                    b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");
                    
                    b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("TEXT");
                    
                    b.Property<string>("CI")
                    .IsRequired()
                    .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Reservations.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");
                    
                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Somatons.Somaton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpeditionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Somatons", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Supplements.Supplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PriceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReservationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PriceId")
                        .IsUnique();

                    b.HasIndex("ReservationId");

                    b.ToTable("Supplements", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrandName")
                    .HasColumnType("TEXT");

                    b.Property<int>("CirculationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Color2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SomatonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CirculationId")
                        .IsUnique();

                    b.HasIndex("InsuranceId")
                        .IsUnique();

                    b.HasIndex("SomatonId")
                        .IsUnique();

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Persons.Client", b =>
                {
                    b.HasBaseType("CarRental.Domain.Entities.Persons.Person");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Persons.Users", b =>
                {
                    b.HasBaseType("CarRental.Domain.Entities.Persons.Person");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Vehicles.Car", b =>
                {
                    b.HasBaseType("CarRental.Domain.Entities.Vehicles.Vehicle");

                    b.Property<bool>("HasAirConditioning")
                        .HasColumnType("INTEGER");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Vehicles.Motorcycle", b =>
                {
                    b.HasBaseType("CarRental.Domain.Entities.Vehicles.Vehicle");

                    b.Property<bool>("HasSideCar")
                        .HasColumnType("INTEGER");

                    b.ToTable("Motorcycles", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Reservations.Reservation", b =>
                {
                    b.HasOne("CarRental.Domain.Entities.Persons.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Supplements.Supplement", b =>
                {
                    b.HasOne("CarRental.Domain.Entities.Common.Price", "Price")
                        .WithOne()
                        .HasForeignKey("CarRental.Domain.Entities.Supplements.Supplement", "PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Domain.Entities.Reservations.Reservation", "Reservation")
                        .WithMany("Supplements")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.HasOne("CarRental.Domain.Entities.Circulations.Circulation", "Circulation")
                        .WithOne()
                        .HasForeignKey("CarRental.Domain.Entities.Vehicles.Vehicle", "CirculationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Domain.Entities.Insurances.Insurance", "Insurance")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarRental.Domain.Entities.Vehicles.Vehicle", "InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Domain.Entities.Somatons.Somaton", "Somaton")
                        .WithOne()
                        .HasForeignKey("CarRental.Domain.Entities.Vehicles.Vehicle", "SomatonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circulation");

                    b.Navigation("Insurance");

                    b.Navigation("Somaton");
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Persons.Client", b =>
                {
                    b.HasOne("CarRental.Domain.Entities.Persons.Person", null)
                        .WithOne()
                        .HasForeignKey("CarRental.Domain.Entities.Persons.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Persons.Users", b =>
                {
                    b.HasOne("CarRental.Domain.Entities.Persons.Person", null)
                        .WithOne()
                        .HasForeignKey("CarRental.Domain.Entities.Persons.Users", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Vehicles.Car", b =>
                {
                    b.HasOne("CarRental.Domain.Entities.Vehicles.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("CarRental.Domain.Entities.Vehicles.Car", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Vehicles.Motorcycle", b =>
                {
                    b.HasOne("CarRental.Domain.Entities.Vehicles.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("CarRental.Domain.Entities.Vehicles.Motorcycle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Insurances.Insurance", b =>
                {
                    b.Navigation("Vehicle")
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Reservations.Reservation", b =>
                {
                    b.Navigation("Supplements");
                });

            modelBuilder.Entity("CarRental.Domain.Entities.Persons.Client", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
